package com.example.user.service.services.impl;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.UUID;
import java.util.stream.Collectors;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Service;
import org.springframework.web.client.RestTemplate;

import com.example.user.service.entities.Hotel;
import com.example.user.service.entities.Rating;
import com.example.user.service.entities.User;
import com.example.user.service.exceptions.ResourceNotFoundException;
import com.example.user.service.external.services.HotelService;
import com.example.user.service.repositories.UserRepository;
import com.example.user.service.services.UserService;

@Service
public class UserServiceImpl implements UserService {

	@Autowired
	private UserRepository userRepository;

	@Autowired
	private RestTemplate restTemplate;
	
	//for feign client
	@Autowired
	private HotelService hotelService;

	private Logger logger = LoggerFactory.getLogger(UserServiceImpl.class);

	@Override
	public User saveUser(User user) {
		// generate unique userId
		String randomUserId = UUID.randomUUID().toString();
		user.setUserId(randomUserId);
		return userRepository.save(user);
	}

	@Override
	public List<User> getAllUser() {
		List<User> users = userRepository.findAll();

		// here if you want, implement RATING SERVICE CALL : using REST TEMPLATE
//		for (User user : users) {
//			// Fetch ratings for each user from RATING SERVICE
//			ArrayList<Rating> ratingsOfUser = restTemplate.getForObject("http://RATINGSERVICE/ratings/users/" + user.getUserId(), ArrayList.class);
//			logger.info("Ratings for user {}: {}", user.getUserId(), ratingsOfUser);
//			user.setRatings(ratingsOfUser);
//		}
		return users;
	}

	// get single user
	@Override
	public User getUserById(String userId) {
		// get user from database with the help of user repository
		User user = userRepository.findById(userId).orElseThrow(
				() -> new ResourceNotFoundException("User with given Id is not found on server !! :" + userId));
				// Fetch rating of above user from RATING SERVICE
				// http://localhost:8083/ratings/users/788d34b3-fa0a-45d1-a58e-8cd83d8776be
		Rating[] ratingsOfUser = restTemplate.getForObject("http://RATINGSERVICE/ratings/users/" + user.getUserId(), Rating[].class);
		logger.info("{} ", ratingsOfUser);

		List<Rating> ratings = Arrays.stream(ratingsOfUser).toList();

		List<Rating> ratingList = ratings.stream().map(rating -> {
			// API call to hotel service to get the hotel
			// http://localhost:8081/hotels/84db6ef0-97b3-40c9-990f-f1044f2e5cf1
			//using RestTemplate
		  ResponseEntity<Hotel> forEntity = restTemplate
					.getForEntity("http://HOTELSERVICE/hotels/" + rating.getHotelId(), Hotel.class); 
			Hotel hotel = forEntity.getBody();   
			
			logger.info("response status code: {} ", forEntity.getStatusCode());   
			
				//using Feign Client
				//Hotel hotel = hotelService.getHotel(rating.getHotelId());
				
			// set the hotel to rating
			rating.setHotel(hotel);
			// return the rating
			return rating;
		}).collect(Collectors.toList());
		user.setRatings(ratingList);
		return user;
	}

}
