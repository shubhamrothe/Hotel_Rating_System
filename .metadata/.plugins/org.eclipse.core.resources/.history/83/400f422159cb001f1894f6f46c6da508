package com.example.user.service.controllers;

import java.util.List;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import com.example.user.service.entities.User;
import com.example.user.service.services.UserService;

import io.github.resilience4j.circuitbreaker.annotation.CircuitBreaker;
import io.github.resilience4j.ratelimiter.annotation.RateLimiter;
import io.github.resilience4j.retry.annotation.Retry;


@RestController
@RequestMapping("/users")  //  -> to map URL with this class
public class UserController {

	@Autowired
	private UserService userService;
	Logger logger= LoggerFactory.getLogger(UserController.class);
	
	//create user
	@PostMapping
	public ResponseEntity<User> createUser(@RequestBody User user)
	{
		 User user1 = userService.saveUser(user);
		return ResponseEntity.status(HttpStatus.CREATED).body(user1);
		
	}
	//get all users
	@GetMapping
	public ResponseEntity<List<User>> getAllUser()
	{
		List<User> allUser = userService.getAllUser();	
		return ResponseEntity.ok(allUser);
	}
	
	//get single user
	//int retryCount=1;
	@GetMapping("/{userId}")
	@CircuitBreaker(name="ratingHotelBreaker", fallbackMethod ="ratingHotelFallback") 
	@Retry(name="ratingHotelService", fallbackMethod="ratingHotelFallback")
	@RateLimiter(name="userRateLimiter", fallbackMethod="ratingHotelFallback")
	public ResponseEntity<User> getSingleUser(@PathVariable String userId)
	{
		logger.info("Get Single User Handler: UserController");
		//logger.info("Retry count: {}",retryCount);
		//retryCount++;
		User userById = userService.getUserById(userId);
		return ResponseEntity.ok(userById);
	} 
	
	//creating  fall back method for circuit breaker
	public ResponseEntity<User> ratingHotelFallback(String userId, Exception ex){
		logger.info("Fallback is executed becouse service is down : ",ex.getMessage());
		
		User user=User.builder()
			.email("dummy@gmail.com")
			.name("Dummy")
			.about("This is a dummy user created becouse some service is down")
			.userId("141234")
			.build();
		return new ResponseEntity<>(user, HttpStatus.OK);
		
	}
}
